
#if ! defined BLOCK_ISEND
   SUBROUTINE lbc_lnk_waitall_/**/PRECISION( cdname, ptab, cd_nat, psgn, kfld, kfillmode, pfillval, lsend, lrecv, ld4only, ldfull )
      CHARACTER(len=*)              , INTENT(in   ) ::   cdname      ! name of the calling subroutine
      TYPE(PTR_4d_/**/PRECISION),  DIMENSION(:), INTENT(inout) ::   ptab        ! pointer of arrays on which apply the b.c.
      CHARACTER(len=1), DIMENSION(:), INTENT(in   ) ::   cd_nat      ! nature of array grid-points
      REAL(PRECISION),  DIMENSION(:), INTENT(in   ) ::   psgn        ! sign used across the north fold boundary
      INTEGER                       , INTENT(in   ) ::   kfld        ! number of pt3d arrays
      INTEGER ,             OPTIONAL, INTENT(in   ) ::   kfillmode   ! filling method for halo over land (default = constant)
      REAL(PRECISION),      OPTIONAL, INTENT(in   ) ::   pfillval    ! background value (used at closed boundaries)
      LOGICAL, DIMENSION(8),OPTIONAL, INTENT(in   ) ::   lsend, lrecv  ! communication with other 4 proc
      LOGICAL,              OPTIONAL, INTENT(in   ) ::   ld4only     ! if .T., do only 4-neighbour comm (ignore corners)
      LOGICAL             , OPTIONAL, INTENT(in   ) ::   ldfull      ! .true. if we also update the last line of the inner domain
      !
      INTEGER  ::   ji,  jj,  jk , jl,  jf, jn      ! dummy loop indices
      INTEGER  ::   ip0i, ip1i, im0i, im1i
      INTEGER  ::   ip0j, ip1j, im0j, im1j
      INTEGER  ::   ishti, ishtj, ishti1, ishtj1, ishti2, ishtj2
      INTEGER  ::                 isgni1, isgni2, isgnj1, isgnj2
      INTEGER  ::                    ii1,    ii2,    ij1,    ij2
      INTEGER  ::   icomm, ierr
      INTEGER  ::   ihls, ihlsmax, idx
      INTEGER  ::   impi_nc
      INTEGER  ::   ifill_nfd
      INTEGER, DIMENSION(4)  ::   iwewe, issnn
      INTEGER, DIMENSION(8)  ::   ibufszS, ibufszR, ishtS, ishtR
      INTEGER, DIMENSION(8)  ::   iStag, iRtag     ! Send and Recv mpi_tag id
      INTEGER, DIMENSION(8)  ::   ireq_recv
      INTEGER, DIMENSION(  kfld)  ::   ipi, ipj, ipk, ipl   ! dimension of the input array
      INTEGER, DIMENSION(8,kfld)  ::   ifill
      INTEGER, DIMENSION(8,kfld)  ::   isizei, ishtSi, ishtRi, ishtPi
      INTEGER, DIMENSION(8,kfld)  ::   isizej, ishtSj, ishtRj, ishtPj
      INTEGER, DIMENSION(8)       ::   jnf
      LOGICAL, DIMENSION(8,kfld)  ::   llsend, llrecv
      LOGICAL  ::   ll4only                                    ! default: 8 neighbourgs
      REAL(PRECISION) ::   zland
      !!----------------------------------------------------------------------
      !
      ! ----------------------------------------- !
      !     1. local variables initialization     !
      ! ----------------------------------------- !
      icomm = mpi_comm_oce        ! shorter name
      !
      ! take care of optional parameters
      !
      ll4only = .FALSE.    ! default definition
      IF( PRESENT(ld4only) )   ll4only = ld4only
      !
      zland = 0._wp                                     ! land filling value: zero by default
      IF( PRESENT( pfillval ) )   zland = pfillval      ! set land value
      !
      ifill_nfd = jpfillcst                             ! default definition
      IF( PRESENT(kfillmode) )   ifill_nfd = kfillmode
      !
      ihlsmax = 0
      !
      DO jf = 1, kfld
         !
         ipi(jf) = SIZE(ptab(jf)%pt4d,1)
         ipj(jf) = SIZE(ptab(jf)%pt4d,2)
         ipk(jf) = SIZE(ptab(jf)%pt4d,3)
         ipl(jf) = SIZE(ptab(jf)%pt4d,4)
         ihls    = ( ipi(jf) - Ni_0 ) / 2
         ihlsmax = MAX(ihls, ihlsmax)
         !
         IF( numcom == -1 ) THEN   ! test input array shape. Use numcom to do these tests only at the beginning of the run
            IF( MOD( ipi(jf) - Ni_0, 2 ) /= 0 ) THEN
               WRITE(ctmp1,*) TRIM(cdname), ' is calling lbc_lnk but the ', jf,'th input array has wong i-size: ', ipi(jf), Ni_0
               CALL ctl_stop( 'STOP', ctmp1 )
            ENDIF
            IF( MOD( ipj(jf) - Nj_0, 2 ) /= 0 ) THEN
               WRITE(ctmp1,*) TRIM(cdname), ' is calling lbc_lnk but the ', jf,'th input array has wong j-size: ', ipj(jf), Nj_0
               CALL ctl_stop( 'STOP', ctmp1 )
            ENDIF
            IF( ( ipj(jf) - Nj_0 ) / 2 /= ihls ) THEN
               WRITE(ctmp1,*) TRIM(cdname), ' is calling lbc_lnk but the ', jf,'th input array as wong i and j-size: ',   &
                  &           ipi(jf), Ni_0, ipj(jf), Nj_0
               CALL ctl_stop( 'STOP', ctmp1 )
            ENDIF
            IF( ihls > n_hlsmax ) THEN
               WRITE(ctmp1,*) TRIM(cdname), ' is calling lbc_lnk but for the ', jf,'th input array, ', ihls, ' > n_hlsmax = ',   &
                  &           n_hlsmax
               CALL ctl_stop( 'STOP', ctmp1 )
            ENDIF
         ENDIF
         !
         ! define llsend and llrecv: logicals which say if mpi-neibourgs for send or receive exist or not.
         IF     ( PRESENT(lsend) .AND. PRESENT(lrecv) ) THEN   ! localy defined neighbourgs 
            CALL ctl_stop( 'STOP', 'mpp_nc_generic+lsend and lrecv not yet implemented')
         ELSE IF( PRESENT(lsend) .OR.  PRESENT(lrecv) ) THEN
            WRITE(ctmp1,*) TRIM(cdname), '  is calling lbc_lnk with only one of the two arguments lsend or lrecv'
            CALL ctl_stop( 'STOP', ctmp1 )
         ELSE                                                  ! default neighbours
            llsend(:,jf) = mpiSnei(:,ihls) >= 0
            IF( ll4only )   llsend(5:8,jf) = .FALSE.           ! exclude corners
            llrecv(:,jf) = mpiRnei(:,ihls) >= 0
            IF( ll4only )   llrecv(5:8,jf) = .FALSE.           ! exclude corners
         ENDIF
         !
         ! define ifill: which method should be used to fill each parts (sides+corners) of the halos
         ! default definition
         DO jn = 1, 8
            IF(          llrecv(jn,jf) ) THEN   ;   ifill(jn,jf) = jpfillmpi       ! with an mpi communication
            ELSEIF(    l_SelfPerio(jn) ) THEN   ;   ifill(jn,jf) = jpfillperio     ! with self-periodicity
            ELSEIF( PRESENT(kfillmode) ) THEN   ;   ifill(jn,jf) = kfillmode       ! localy defined
            ELSEIF(          ihls == 0 ) THEN   ;   ifill(jn,jf) = jpfillnothing   ! do nothing
            ELSE                                ;   ifill(jn,jf) = jpfillcst       ! constant value (zland)
            ENDIF
         END DO
         ! take care of "indirect self-periodicity" for the corners
         DO jn = 5, 8
            IF(.NOT.l_SelfPerio(jn) .AND. l_SelfPerio(jpwe)) ifill(jn,jf) = jpfillnothing ! no bi-perio but ew-perio: do corners later
            IF(.NOT.l_SelfPerio(jn) .AND. l_SelfPerio(jpso)) ifill(jn,jf) = jpfillnothing ! no bi-perio but ns-perio: do corners later
         END DO
         ! north fold treatment
         IF( l_IdoNFold )   ifill(jpno,jf) = jpfillnothing    ! we do north fold -> do nothing for northern halo
         
         ! We first define the localization and size of the parts of the array that will be sent (s), received (r)
         ! or used for periodocity (p). The localization is defined as "the bottom left corner - 1" in i and j directions.
         ! This is a shift that will be applied later in the do loops to pick-up the appropriate part of the array
         !
         ! all definitions bellow do not refer to N[ij][se]0 so we can use it with any local value of ihls
         !                       !                       ________________________
         ip0i =              0   !          im0j = inner |__|________________|__|
         ip1i =           ihls   !   im1j = inner - halo |  |__|__________|__|  |
         im1i = ipi(jf)-2*ihls   !                       |  |  |          |  |  |
         im0i = ipi(jf) - ihls   !                       |  |  |          |  |  |
         ip0j =              0   !                       |  |  |          |  |  |
         ip1j =           ihls   !                       |  |__|__________|__|  |
         im1j = ipj(jf)-2*ihls   !           ip1j = halo |__|__|__________|__|__|
         im0j = ipj(jf) - ihls   !              ip0j = 0 |__|________________|__|
         !                       !                    ip0i ip1i        im1i im0i
         !
         iwewe(:) = (/ jpwe,jpea,jpwe,jpea /)   ;   issnn(:) = (/ jpso,jpso,jpno,jpno /)
         !        sides:     west  east south north      ;   corners: so-we, so-ea, no-we, no-ea
         isizei(1:4,jf) = (/ ihls, ihls, Ni_0, Ni_0 /)   ;   isizei(5:8,jf) = ihls                 ! i- count
         isizej(1:4,jf) = (/ Nj_0, Nj_0, ihls, ihls /)   ;   isizej(5:8,jf) = ihls                 ! j- count
         ishtSi(1:4,jf) = (/ ip1i, im1i, ip1i, ip1i /)   ;   ishtSi(5:8,jf) = ishtSi( iwewe,jf )   ! i- shift  send data
         ishtSj(1:4,jf) = (/ ip1j, ip1j, ip1j, im1j /)   ;   ishtSj(5:8,jf) = ishtSj( issnn,jf )   ! j- shift  send data
         ishtRi(1:4,jf) = (/ ip0i, im0i, ip1i, ip1i /)   ;   ishtRi(5:8,jf) = ishtRi( iwewe,jf )   ! i- shift  recv data
         ishtRj(1:4,jf) = (/ ip1j, ip1j, ip0j, im0j /)   ;   ishtRj(5:8,jf) = ishtRj( issnn,jf )   ! j- shift  recv data
         ishtPi(1:4,jf) = (/ im1i, ip1i, ip1i, ip1i /)   ;   ishtPi(5:8,jf) = ishtPi( iwewe,jf )   ! i- shift perio data
         ishtPj(1:4,jf) = (/ ip1j, ip1j, im1j, ip1j /)   ;   ishtPj(5:8,jf) = ishtPj( issnn,jf )   ! j- shift perio data
         !
      END DO   ! jf
      !
      IF( narea == 1 .AND. numcom == -1 )   CALL mpp_report( cdname, SUM(ipk(:))/kfld, SUM(ipl(:))/kfld, kfld, ld_lbc = .TRUE. )

      !
      ! -------------------------------- !
      !     2. Prepare MPI exchanges     !
      ! -------------------------------- !
      !
      iStag = (/ 1, 2, 3, 4, 5, 6, 7, 8 /)   ! can be any value but each value must be unique
      ! define iRtag with the corresponding iStag, e.g. data received at west where sent at east.
      iRtag(jpwe) = iStag(jpea)   ;   iRtag(jpea) = iStag(jpwe)   ;   iRtag(jpso) = iStag(jpno)   ;   iRtag(jpno) = iStag(jpso)
      iRtag(jpsw) = iStag(jpne)   ;   iRtag(jpse) = iStag(jpnw)   ;   iRtag(jpnw) = iStag(jpse)   ;   iRtag(jpne) = iStag(jpsw)
      !
      ! size of the buffer to be sent/recv in each direction
      ibufszS(:) = 0   ! defaut definition
      ibufszR(:) = 0
      DO jf = 1, kfld
         DO jn = 1, 8
            IF( llsend(jn,jf) )   ibufszS(jn) = ibufszS(jn) + isizei(jn,jf) * isizej(jn,jf) * ipk(jf) * ipl(jf)
            IF( llrecv(jn,jf) )   ibufszR(jn) = ibufszR(jn) + isizei(jn,jf) * isizej(jn,jf) * ipk(jf) * ipl(jf)
         END DO
      END DO
      !
      ! offset to apply to find the position of the sent/recv data within the buffer
      ishtS(1) = 0
      DO jn = 2, 8
         ishtS(jn) = ishtS(jn-1) + ibufszS(jn-1)
      END DO
      ishtR(1) = 0
      DO jn = 2, 8
         ishtR(jn) = ishtR(jn-1) + ibufszR(jn-1)
      END DO
      
      ! Default definition when no communication is done. Understood by mpi_waitall
      nreq_p2p(:) = MPI_REQUEST_NULL   ! WARNING: Must be done after the call to mpi_waitall just above
      ireq_recv(:) = MPI_REQUEST_NULL
      
      ! -------------------------------- !
      !     2. Allocate, fill and send (non-blocking) arrays    !
      ! ------------------------------------------------------- !
      !
      ! Allocate buffer arrays to be sent/received if needed
      ALLOCATE( BUFFSND(SUM(ibufszS)) )
      !
      ! send diagonals first as there is less copying to be done
      DO jn = 5, 8
#define BLOCK_ISEND
#  include "lbc_lnk_waitall_generic.h90"         
#undef  BLOCK_ISEND
      END DO
      !                                            ! not diagonals !
      DO jn = 1, 4
#define BLOCK_ISEND
#  include "lbc_lnk_waitall_generic.h90"         
#undef  BLOCK_ISEND
      END DO

      ! ------------------------------ !
      !     4. Non Blocking Receives   !
      ! ------------------------------ !
      !
      ALLOCATE( BUFFRCV(SUM(ibufszR)) )

      DO jn = 1, 8
         IF( ibufszR(jn) > 0 ) THEN          ! we must receive some data
#if ! defined key_mpi_off
            ! non-blocking receive in local buffer. use mpiRnei(jn,n_hlsmax), see mppini
            CALL MPI_IRECV( BUFFRCV(ishtR(jn)+1), ibufszR(jn), MPI_TYPE, mpiRnei(jn,n_hlsmax), iRtag(jn), icomm, ireq_recv(jn), ierr )
#endif
         ENDIF
      END DO

      ! --------------------------------- !
      !     4. Fill all Non-MPI halos     !
      ! --------------------------------- !
      !
      ! do it first to give (potentially) more time for the communications
      DO jn = 1, 8
         DO jf = 1, kfld
            !
            IF(     ifill(jn,jf) == jpfillcst ) THEN
               !
               ishti = ishtRi(jn,jf)
               ishtj = ishtRj(jn,jf)
               DO jl = 1, ipl(jf)  ;  DO jk = 1, ipk(jf)  ;  DO jj = 1,isizej(jn,jf)  ;  DO ji = 1,isizei(jn,jf)
                  ptab(jf)%pt4d(ishti+ji,ishtj+jj,jk,jl) = zland
               END DO   ;   END DO   ;   END DO   ;   END DO
               !
            ELSEIF( ifill(jn,jf) == jpfillperio .OR. ifill(jn,jf) == jpfillcopy ) THEN
               !
               IF(     jn == jpwe .OR. jn == jpsw .OR. jn == jpnw ) THEN   ! western side
                                                               ishti1 = ishtSi(jpwe,jf) + 1   ;   isgni1 = -1
                  IF( ifill(jn,jf) == jpfillperio ) THEN   ;   ishti2 = ishtRi(jpea,jf) + 1   ;   isgni2 = -1
                  ELSE                                     ;   ishti2 = ishtSi(jpwe,jf)       ;   isgni2 =  1
                  ENDIF
               ELSEIF( jn == jpea .OR. jn == jpse .OR. jn == jpne ) THEN   ! eastern side
                                                               ishti1 = ishtRi(jpea,jf)       ;   isgni1 =  1
                  IF( ifill(jn,jf) == jpfillperio ) THEN   ;   ishti2 = ishtSi(jpwe,jf)       ;   isgni2 =  1
                  ELSE                                     ;   ishti2 = ishtRi(jpea,jf) + 1   ;   isgni2 = -1
                  ENDIF
               ELSE                                                        ! southern/northern side
                                                               ishti1 = ishtRi(jn,jf)         ;   isgni1 =  1
                                                               ishti2 = ishtSi(jn,jf)         ;   isgni2 =  1
               ENDIF
               IF(     jn == jpso .OR. jn == jpsw .OR. jn == jpse ) THEN   ! southern side
                                                               ishtj1 = ishtSj(jpso,jf) + 1   ;   isgnj1 = -1
                  IF( ifill(jn,jf) == jpfillperio ) THEN   ;   ishtj2 = ishtRj(jpno,jf) + 1   ;   isgnj2 = -1
                  ELSE                                     ;   ishtj2 = ishtSj(jpso,jf)       ;   isgnj2 =  1
                  ENDIF
               ELSEIF( jn == jpno .OR. jn == jpnw .OR. jn == jpne ) THEN   ! northern side
                                                               ishtj1 = ishtRj(jpno,jf)       ;   isgnj1 =  1
                  IF( ifill(jn,jf) == jpfillperio ) THEN   ;   ishtj2 = ishtSj(jpso,jf)       ;   isgnj2 =  1
                  ELSE                                     ;   ishtj2 = ishtRj(jpno,jf) + 1   ;   isgnj2 = -1
                  ENDIF
               ELSE                                                        ! western/eastern side
                                                               ishtj1 = ishtRj(jn,jf)         ;   isgnj1 =  1
                                                               ishtj2 = ishtSj(jn,jf)         ;   isgnj2 =  1  
               ENDIF
               !
               DO jl = 1, ipl(jf)  ;  DO jk = 1, ipk(jf)  ;  DO jj = 1,isizej(jn,jf)  ;  DO ji = 1,isizei(jn,jf)
                  ii1 = ishti1 +       ji                * isgni1
                  ij1 = ishtj1 +       jj                * isgnj1
                  ii2 = ishti2 + ( MOD(ji-1, Ni_0) + 1 ) * isgni2   ! warning: Ni_0 might be smaller than isizei(jn,jf)
                  ij2 = ishtj2 + ( MOD(jj-1, Nj_0) + 1 ) * isgnj2   ! warning: Nj_0 might be smaller than isizej(jn,jf)
                  ptab(jf)%pt4d(ii1,ij1,jk,jl) = ptab(jf)%pt4d(ii2,ij2,jk,jl)
               END DO   ;   END DO   ;   END DO   ;   END DO
               !
!!$      ELSEIF( ifill(jn,jf) == jpfillnothing ) THEN   ! no filling 
!!$      ELSEIF( ifill(jn,jf) == jpfillmpi     ) THEN   ! do it later
            ENDIF
         END DO   ! jf
      END DO   ! jn
      !
      ! ------------------------------------------------- !
      !     3. Fill  halos with values from neighbours    !
      ! ------------------------------------------------- !
         
#if ! defined key_mpi_off
      CALL MPI_WAITALL(8, ireq_recv,  MPI_STATUSES_IGNORE, ierr)
#endif
      !
      DO jn = 1, 8
         idx = ishtR(jn)
         DO jf = 1, kfld
            IF( ifill(jn,jf) == jpfillmpi ) THEN    ! Use MPI-received data
               ishti = ishtRi(jn,jf)
               ishtj = ishtRj(jn,jf)
               DO jl = 1, ipl(jf)  ;  DO jk = 1, ipk(jf)  ;  DO jj = 1,isizej(jn,jf)  ;  DO ji = 1,isizei(jn,jf)
                  idx = idx + 1
                  ptab(jf)%pt4d(ishti+ji,ishtj+jj,jk,jl) = BUFFRCV(idx)
               END DO   ;   END DO   ;   END DO   ;   END DO
            ENDIF
         END DO
      END DO
      !
      ! ---------------------------------------------------------------- !
      !     6. Potential "indirect self-periodicity" for the corners     !
      ! ---------------------------------------------------------------- !
      !
      DO jn = 5, 8
         IF( .NOT. l_SelfPerio(jn) .AND. l_SelfPerio(jpwe)  ) THEN   ! no bi-perio but ew-perio: corners indirect definition
            DO jf = 1, kfld
               ishti  = ishtRi(jn,jf)
               ishtj  = ishtRj(jn,jf)
               ishti2 = ishtPi(jn,jf)   ! use i- shift periodicity
               ishtj2 = ishtRj(jn,jf)   ! use j- shift recv location: use ew-perio -> ok as filling of the so and no halos now done
               DO jl = 1, ipl(jf)   ;   DO jk = 1, ipk(jf)   ;   DO jj = 1,isizej(jn,jf)   ;   DO ji = 1,isizei(jn,jf)
                  ptab(jf)%pt4d(ishti+ji,ishtj+jj,jk,jl) = ptab(jf)%pt4d(ishti2+ji,ishtj2+jj,jk,jl)
               END DO   ;   END DO   ;   END DO   ;   END DO
            END DO
         ENDIF
         IF( .NOT. l_SelfPerio(jn) .AND. l_SelfPerio(jpso)  ) THEN   ! no bi-perio but ns-perio: corners indirect definition
            DO jf = 1, kfld
               ishti  = ishtRi(jn,jf)
               ishtj  = ishtRj(jn,jf)
               ishti2 = ishtRi(jn,jf)   ! use i- shift recv location: use ns-perio -> ok as filling of the we and ea halos now done
               ishtj2 = ishtPj(jn,jf)   ! use j- shift periodicity
               DO jl = 1, ipl(jf)   ;   DO jk = 1, ipk(jf)   ;   DO jj = 1,isizej(jn,jf)   ;   DO ji = 1,isizei(jn,jf)
                  ptab(jf)%pt4d(ishti+ji,ishtj+jj,jk,jl) = ptab(jf)%pt4d(ishti2+ji,ishtj2+jj,jk,jl)
               END DO   ;   END DO   ;   END DO   ;   END DO
            END DO
         ENDIF
      END DO
      !
      ! ------------------------------- !
      !     7. north fold treatment     !
      ! ------------------------------- !
      !
      IF( l_IdoNFold ) THEN
         IF( jpni == 1 )  THEN   ;   CALL lbc_nfd( ptab, cd_nat, psgn                  , kfld         )   ! self NFold
         ELSE                    ;   CALL mpp_nfd( ptab, cd_nat, psgn, ifill_nfd, zland, kfld, ldfull )   ! mpi  NFold
         ENDIF
      ENDIF
      !
      !
      ! -------------------------------------------- !
      !     5. deallocate local temporary arrays     !
      ! -------------------------------------------- !
      !
#if ! defined key_mpi_off
      CALL MPI_WAITALL( 8, nreq_p2p, MPI_STATUSES_IGNORE, ierr )
#endif
      
      DEALLOCATE(BUFFSND)
      DEALLOCATE(BUFFRCV)

   END SUBROUTINE lbc_lnk_waitall_/**/PRECISION
#endif


#if defined BLOCK_ISEND
   IF( ibufszS(jn) > 0 ) THEN          ! we must send some data
      idx = ishtS(jn)
      DO jf = 1, kfld                  ! first: fill the buffer to be sent
         IF( llsend(jn,jf) ) THEN
            ishti = ishtSi(jn,jf)
            ishtj = ishtSj(jn,jf)
            DO jl = 1, ipl(jf)  ;  DO jk = 1, ipk(jf)  ;  DO jj = 1,isizej(jn,jf)  ;  DO ji = 1,isizei(jn,jf)
               idx = idx + 1
               BUFFSND(idx) = ptab(jf)%pt4d(ishti+ji,ishtj+jj,jk,jl)
            END DO   ;   END DO   ;   END DO   ;   END DO
         ENDIF
      END DO
#if ! defined key_mpi_off
      ! next: non-blocking send using local buffer. use mpiSnei(jn,n_hlsmax), see mppini
      CALL MPI_ISEND( BUFFSND(ishtS(jn)+1), ibufszS(jn), MPI_TYPE, mpiSnei(jn,n_hlsmax), iStag(jn), icomm, nreq_p2p(jn), ierr )
#endif
   ENDIF
#endif

function nf90_inq_libvers()
  character(len = 80) :: nf90_inq_libvers
     nf90_inq_libvers = 'not used'
end function nf90_inq_libvers
function nf90_strerror(ncerr)
  integer, intent( in) :: ncerr
  character(len = 80)  :: nf90_strerror
     nf90_strerror = 'not used'
end function nf90_strerror
function nf90_inq_base_pe(ncid, pe)
  integer, intent( in) :: ncid
  integer, intent(out) :: pe
  integer              :: nf90_inq_base_pe
     nf90_inq_base_pe = 0
end function nf90_inq_base_pe
function nf90_set_base_pe(ncid, pe)
  integer, intent( in) :: ncid, pe
  integer              :: nf90_set_base_pe
     nf90_set_base_pe = 0
end function nf90_set_base_pe
function nf90_create_mp(path, cmode, initalsz, basepe, chunksizehint, ncid)
  character (len = *), intent( in) :: path
  integer,             intent( in) :: cmode, initalsz, basepe, chunksizehint
  integer,             intent(out) :: ncid
  integer                          :: nf90_create_mp
     nf90_create_mp = 0
end function nf90_create_mp
function nf90_open_mp(path, mode, basepe, chunksizeint, ncid)
  character (len = *), intent( in) :: path
  integer,             intent( in) :: mode, basepe, chunksizeint
  integer,             intent(out) :: ncid
  integer                          :: nf90_open_mp
     nf90_open_mp = 0
end function nf90_open_mp
function nf90_set_fill(ncid, fillmode, old_mode)
  integer, intent( in) :: ncid, fillmode 
  integer, intent(out) :: old_mode
  integer              :: nf90_set_fill
     nf90_set_fill = 0
end function nf90_set_fill
function nf90_redef(ncid)
  integer, intent( in) :: ncid
  integer              :: nf90_redef
     nf90_redef = 0
end function nf90_redef
function nf90_enddef(ncid, h_minfree, v_align, v_minfree, r_align)
  integer,           intent( in) :: ncid
  integer, optional, intent( in) :: h_minfree, v_align, v_minfree, r_align
  integer                        :: nf90_enddef
     nf90_enddef = 0
end function nf90_enddef
function nf90_sync(ncid)
  integer, intent( in) :: ncid
  integer              :: nf90_sync
     nf90_sync = 0
end function nf90_sync
function nf90_abort(ncid)
  integer, intent( in) :: ncid
  integer              :: nf90_abort
     nf90_abort = 0
end function nf90_abort
function nf90_close(ncid)
  integer, intent( in) :: ncid
  integer              :: nf90_close
     nf90_close = 0
end function nf90_close
function nf90_delete(name)
  character(len = *), intent( in) :: name
  integer                         :: nf90_delete
     nf90_delete = 0
end function nf90_delete
function nf90_inquire(ncid, nDimensions, nVariables, nAttributes, unlimitedDimId, formatNum)
  integer,           intent( in) :: ncid
  integer, optional, intent(out) :: nDimensions, nVariables, nAttributes, unlimitedDimId, formatNum
  integer                        :: nf90_inquire
     nf90_inquire = 0
end function nf90_inquire
function nf90_inq_path(ncid, pathlen, path)
  integer,            intent(in)    :: ncid
  integer,            intent(inout) :: pathlen
  character(len = *), intent(inout) :: path
  integer                           :: nf90_inq_path
     nf90_inq_path = 0
end function nf90_inq_path
function nf90_inq_format(ncid, format_type)
  integer,            intent(in)    :: ncid
  integer,            intent(out)   :: format_type
  integer                           :: nf90_inq_format
     nf90_inq_format = 0
end function nf90_inq_format

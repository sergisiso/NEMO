   !!======================================================================
   !!                   ***  dynldf_lev_rot_scheme.h90  ***
   !! dynldf_lev:   divergence the lateral iso-neutral fluxes
#if defined lap
   !!                             laplacian
#elif defined blp_p1
   !!                        bilaplacian: 1st pass
#elif defined blp_p2
   !!                        bilaplacian: 2nd pass
#endif
   !!======================================================================
   !! History :  4.5  ! 2022-10  (S. Techene, G, Madec) refactorization to reduce local memory usage
   !!                                                 + no more re-entering lap with dynldf_lev_blp creation
   !!----------------------------------------------------------------------

	    
            !!======================================================================
            !!  masked tracer gradient : (zdit, zdjt, zdkt) at both jk and jk+1
            !!======================================================================
            !
            DO_2D( INN, INN+1, INN, INN+1 )
               !                                      ! ahm * e3 * curl  (warning: computed for ji-1,jj-1)
               zcur(ji-1,jj-1) = ahmf(ji-1,jj-1,jk) * e3f(ji-1,jj-1,jk) * r1_e1e2f(ji-1,jj-1)       &   ! ahmf already * by fmask
                  &     * (  ( e2v(ji  ,jj-1) * pv_in(ji  ,jj-1,jk,Kbb) - e2v(ji-1,jj-1) * pv_in(ji-1,jj-1,jk,Kbb) )  &
                  &        - ( e1u(ji-1,jj  ) * pu_in(ji-1,jj  ,jk,Kbb) - e1u(ji-1,jj-1) * pu_in(ji-1,jj-1,jk,Kbb) )  )
               !                                      ! ahm * div        (warning: computed for ji,jj)
               zdiv(ji,jj)     = ahmt(ji,jj,jk) * r1_e1e2t(ji,jj) / e3t(ji,jj,jk,Kbb)               &   ! ahmt already * by tmask
                  &     * (  ( e2u(ji,jj)*e3u(ji,jj,jk,Kbb) * pu_in(ji,jj,jk,Kbb) - e2u(ji-1,jj)*e3u(ji-1,jj  ,jk,Kbb) * pu_in(ji-1,jj  ,jk,Kbb) )  &
                  &        + ( e1v(ji,jj)*e3v(ji,jj,jk,Kbb) * pv_in(ji,jj,jk,Kbb) - e1v(ji,jj-1)*e3v(ji  ,jj-1,jk,Kbb) * pv_in(ji  ,jj-1,jk,Kbb) )  )
            END_2D
            !
            DO_2D( INN, INN, INN, INN )   ! - curl( curl) + grad( div )
#if   defined lap
               pu(ji,jj,jk,Krhs) = pu(ji,jj,jk,Krhs) +               &   ! added to RHS with PLUS sign (lap)
#elif defined blp_p1
               zulap(ji,jj)      =                                   &   ! store in zulap
#elif defined blp_p2
               pu(ji,jj,jk,Krhs) = pu(ji,jj,jk,Krhs) -               &   ! added to RHS with MINUS sign (blp)
#endif
                  &     umask(ji,jj,jk) * (    &    ! * by umask is mandatory for dyn_ldf_blp use
                  &              - ( zcur(ji  ,jj) - zcur(ji,jj-1) ) * r1_e2u(ji,jj) / e3u(ji,jj,jk,Kmm)   &
                  &              + ( zdiv(ji+1,jj) - zdiv(ji,jj  ) ) * r1_e1u(ji,jj)                      )
#if   defined lap
               pv(ji,jj,jk,Krhs) = pv(ji,jj,jk,Krhs) +               &   ! added to RHS with PLUS sign (lap)
#elif defined blp_p1
               zvlap(ji,jj)      =                                   &   ! store in zulap
#elif defined blp_p2
               pv(ji,jj,jk,Krhs) = pv(ji,jj,jk,Krhs) -               &   ! added to RHS with MINUS sign (blp)
#endif
                  &     vmask(ji,jj,jk) * (    &    ! * by vmask is mandatory for dyn_ldf_blp use
                  &                ( zcur(ji,jj  ) - zcur(ji-1,jj) ) * r1_e1v(ji,jj) / e3v(ji,jj,jk,Kmm)   &
                  &              + ( zdiv(ji,jj+1) - zdiv(ji  ,jj) ) * r1_e2v(ji,jj)                      )
            END_2D
            !
#if defined lap
            IF( l_ldfeke .AND. nn_eke_opt == 2 ) THEN        ! GEOMETRIC source term        
               DO_2D( INN, INN+1, INN, INN+1 )
                  zah_cur2(ji-1,jj-1) = zah_cur2(ji-1,jj-1) +                         &
                    &                       zcur(ji-1,jj-1)**2 / MAX( 1._wp , ahmf(ji-1,jj-1,jk) ) * fmask(ji-1,jj-1,jk)
                  zah_div2(ji  ,jj  ) = zah_div2(ji  ,jj  ) + e3t(ji  ,jj  ,jk,Kbb) * &
                    &                       zdiv(ji  ,jj  )**2 / MAX( 1._wp , ahmt(ji  ,jj  ,jk) ) * tmask(ji,jj,jk)
               END_2D
            ENDIF
#endif

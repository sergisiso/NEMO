#----------#
# SETTE CI #
#----------#


workflow:

  name: "SETTE : $NEMO_HPC $NEMO_COMPILER $NEMO_COMPILATION - $NEMO_CONFIG $NEMO_TIMESTEPPING cfg(s) - $SETTE_TEST test(s)"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'web'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_COMMIT_TITLE =~ /(?i).*\[ci\].*/
    - if: $CI_PIPELINE_SOURCE == 'schedule'


include:

  # PIPELINE VARIABLES
  - local: '.gitlab-ci/.VAR-SELECT.yml'

  # SETTE TESTS
  - local: '.gitlab-ci/.TEST-VAR.yml'
  - local: '.gitlab-ci/.TEST-ALL.yml'
    rules:
      - if: $SETTE_TEST == "ALL"
  - local: '.gitlab-ci/.TEST-RESTART.yml'
    rules:
      - if: $SETTE_TEST == "RESTART"
  - local: '.gitlab-ci/.TEST-REPRO.yml'
    rules:
      - if: $SETTE_TEST == "REPRO"
  - local: '.gitlab-ci/.TEST-CORRUPT.yml'
    rules:
      - if: $SETTE_TEST == "CORRUPT"
  - local: '.gitlab-ci/.TEST-PHYOPTS.yml'
    rules:
      - if: $SETTE_TEST == "PHYOPTS"

  # NEMO CONFIGURATIONS
  - local: '.gitlab-ci/.CFG-ALL.yml'
    rules:
    - if: $NEMO_CONFIG == "ALL"
  - local: '.gitlab-ci/.CFG-SELECT.yml'
    rules:
      - if: $NEMO_CONFIG != "ALL"

  # HPC
  - local: '.gitlab-ci/.HPC-MERCATOR.yml'


# YAML ANCHORS

.cache: &cache_CFG
  key: ${CONFIG}_${CI_COMMIT_SHORT_SHA}_${CI_PIPELINE_ID}
  paths:
    - $CI_PROJECT_DIR/{cfgs,tests}/${CONFIG}_ST/EXP*
    - $CI_PROJECT_DIR/{cfgs,tests}/${CONFIG}_ST/BLD/bin
    - $CI_PROJECT_DIR/{cfgs,tests}/${CONFIG}_ST/cpp_${CONFIG}_ST.fcm

.loop: &loop
    matrix:
      - CONFIG: !reference [.config, variables, CONFIG]

.artifact_run: &artifact_run
    paths:
      - sette/$LOG_FILE
      - cfgs/${CONFIG}_ST/*/sette.*.out
      - cfgs/${CONFIG}_ST/*/sette.*.err
      - cfgs/${CONFIG}_ST/*/ocean.output*
      - tests/${CONFIG}_ST/*/sette.*.out
      - tests/${CONFIG}_ST/*/sette.*.err
      - tests/${CONFIG}_ST/*/ocean.output*
    when: always
    expire_in: 1 week

.artifact_rpt: &artifact_rpt
    paths: ['sette/$LOG_FILE']
    when: always
    expire_in: 1 week


stages:
  - compile
  - run
  - check
  - report


before_script:
# the following commands will be executed at the beginning of each job
# they are needed to copy param.cfg to SETTE directory and to load the modules
  - declare -A HOST_NAME=( ["aa"]="ECMWF" ["ab"]="ECMWF" ["ac"]="ECMWF" ["ad"]="ECMWF" ["lir"]="LIR"
                           ["belenoslogin"]="MF" ["irene"]="IR" ["jean-zay"]="JZ" )
  # modules should be loaded using .env files in NEMO arch directory
  - SETTE_MOD=${HOST_NAME[${HOSTNAME//[-,.,0-9]*}]}_SETTE_MOD
  - if [ -n "${!SETTE_MOD}" ]; then
      if [ -d ${HOME}/modules ]; then module use ${HOME}/modules; fi;
      module purge || true;
      module load ${!SETTE_MOD};
    fi
  - set +x   # debug prints
  # copy SETTE local param.cfg file
  - SETTE_CFG=${HOST_NAME[${HOSTNAME//[-,.,0-9]*}]}_SETTE_CFG
  - cp -aLv ${!SETTE_CFG} sette/param.cfg
  - git config core.filemode false   # ignore git(lab) symlinks permissions changes when pushing then pulling cache ("old mode 100755 -> new mode 100644")
  - SETTE_OPT="-u -w"   # no user interaction + wait for jobs to end options
  - RPT_OPT="-u"        # no user interaction
  - if [[ ${NEMO_COMPILATION} == "debug" ]]; then SETTE_OPT="${SETTE_OPT} -b"; RPT_OPT="${RPT_OPT} -b"; fi
  - if [[ ${NEMO_TIMESTEPPING} == "MLF"  ]]; then SETTE_OPT="${SETTE_OPT} -Q"; fi


# JOBS
# sette_cmp : compile reference configurations / testcases
# sette_run :     run reference configurations / testcases
# sette_rpt :   check reference configurations / testcases results


sette_cmp:
  stage: compile
  parallel:   # Parallelisation across the selected configuration(s)
    <<: *loop
  rules:      # Restriction to the configurations relevant for the selected test(s)
    - if: ($CONFIG =~ $PATTERN || $NEMO_CONFIG =~ $PATTERN)
  cache:
    <<: *cache_CFG
    policy: push
  tags:
    - $NEMO_HPC
  script:
    - cd sette
    - ./sette.sh ${SETTE_OPT} -n "${CONFIG}" -x "COMPILE" | tee -a sette_cmp_${CONFIG}_${CI_COMMIT_SHORT_SHA}_${NEMO_HPC}.log
  artifacts:
    paths:
      - sette/sette_cmp_${CONFIG}_${CI_COMMIT_SHORT_SHA}_${NEMO_HPC}.log
    when: always
    expire_in: 30 days


sette_run:RESTART:
  stage: run
  needs:             # Dependency on the compilation of the configurations relevant for the 'RESTART' test
    - job: sette_cmp
      parallel:
        matrix:
          - CONFIG: !reference [.restart, variables, CONFIG]
  parallel:          # Parallelisation across the selected configuration(s)
    <<: *loop
  rules:             # Dependency on the 'RESTART'-test selection, and restriction to the configurations relevant for the 'RESTART' test
    - if: $SETTE_TEST =~ /ALL|RESTART/ && ($CONFIG =~ $PATTERN_RESTART || $NEMO_CONFIG =~ $PATTERN_RESTART)
  dependencies: []   # No retrieval of previous artefacts
  cache:
    <<: *cache_CFG
    policy: pull
  tags:
    - $NEMO_HPC
  variables:
    TEST_TYPE: 'RESTART'
    LOG_FILE: 'sette_run_${TEST_TYPE}_${CONFIG}_${NEMO_HPC}_${CI_COMMIT_SHORT_SHA}.log'
    GIT_STRATEGY: none
  script:
    - cd sette
    - ./sette.sh ${SETTE_OPT} -n "${CONFIG}" -x "${TEST_TYPE}" | tee -a ${LOG_FILE}
  artifacts:
    <<: *artifact_run


sette_run:REPRO:
  stage: run
  needs:
    - job: sette_cmp
      parallel:
        matrix:
          - CONFIG: !reference [.repro, variables, CONFIG]
  dependencies: []   # do not retrieve previous artifacts
  rules:
    - if: $SETTE_TEST =~ /ALL|REPRO/ && ($CONFIG =~ $PATTERN_REPRO || $NEMO_CONFIG =~ $PATTERN_REPRO)
  parallel: 
    <<: *loop
  cache:
    <<: *cache_CFG
    policy: pull
  tags:
    - $NEMO_HPC
  variables:
    TEST_TYPE: 'REPRO'
    LOG_FILE: 'sette_run_${TEST_TYPE}_${CONFIG}_${NEMO_HPC}_${CI_COMMIT_SHORT_SHA}.log'
    GIT_STRATEGY: none
  script:
    - cd sette
    - ./sette.sh ${SETTE_OPT} -n "${CONFIG}" -x "${TEST_TYPE}" | tee -a ${LOG_FILE}
  artifacts:
    <<: *artifact_run


sette_run:CORRUPT:
  stage: run
  needs:
    - job: sette_cmp
      parallel:
        matrix:
          - CONFIG: !reference [.corrupt, variables, CONFIG]
  dependencies: []   # do not retrieve previous artifacts
  rules:
    - if: $SETTE_TEST =~ /ALL|CORRUPT/ && ($CONFIG =~ $PATTERN_CORRUPT || $NEMO_CONFIG =~ $PATTERN_CORRUPT)
  parallel: 
    <<: *loop
  cache:
    <<: *cache_CFG
    policy: pull
  tags:
    - $NEMO_HPC
  variables:
    TEST_TYPE: 'CORRUPT'
    LOG_FILE: 'sette_run_${TEST_TYPE}_${CONFIG}_${NEMO_HPC}_${CI_COMMIT_SHORT_SHA}.log'
    GIT_STRATEGY: none
  script:
    - cd sette
    - ./sette.sh ${SETTE_OPT} -n "${CONFIG}" -x "${TEST_TYPE}" | tee -a ${LOG_FILE}
  artifacts:
    <<: *artifact_run


sette_run:PHYOPTS:
  stage: run
  needs:
    - job: sette_cmp
      parallel:
        matrix:
          - CONFIG: !reference [.phyopts, variables, CONFIG]
  dependencies: []   # do not retrieve previous artifacts
  rules:
    - if: $SETTE_TEST =~ /ALL|PHYOPTS/ && ($CONFIG =~ $PATTERN_PHYOPTS || $NEMO_CONFIG =~ $PATTERN_PHYOPTS)
  parallel: 
    <<: *loop
  cache:
    <<: *cache_CFG
    policy: pull
  tags:
    - $NEMO_HPC
  variables:
    TEST_TYPE: 'PHYOPTS'
    LOG_FILE: 'sette_run_${TEST_TYPE}_${CONFIG}_${NEMO_HPC}_${CI_COMMIT_SHORT_SHA}.log'
    GIT_STRATEGY: none
  script:
    - cd sette
    - ./sette.sh ${SETTE_OPT} -n "${CONFIG}" -x "${TEST_TYPE}" | tee -a ${LOG_FILE}
  artifacts:
    <<: *artifact_run


sette_rpt:RESTART:
  stage: check
  needs:             # Dependency on the completion of the test runs relevant for the 'RESTART' test
    - job: sette_run:RESTART
      parallel:
        matrix:
          - CONFIG: !reference [.restart, variables, CONFIG]
  parallel:          # Parallelisation across the selected configuration(s)
    <<: *loop
  rules:             # Dependency on the 'RESTART'-test selection, and restriction to the configurations relevant for the 'RESTART' test
    - if: $SETTE_TEST =~ /ALL|RESTART/ && ($CONFIG =~ $PATTERN_RESTART || $NEMO_CONFIG =~ $PATTERN_RESTART)
      when: delayed
      start_in: 5 seconds
  dependencies: []   # No retrieval of previous artefacts
  tags:
    - $NEMO_HPC
  variables:
    TEST_TYPE: 'RESTART'
    LOG_FILE: 'sette_rpt_${TEST_TYPE}_${CONFIG}_${NEMO_HPC}_${CI_COMMIT_SHORT_SHA}.log'
    GIT_STRATEGY: none
  script:
    - cd sette
    - ./sette_rpt.sh ${RPT_OPT} -n "${CONFIG}" -x "${TEST_TYPE}" -s ${CI_COMMIT_SHORT_SHA} | tee -a ${LOG_FILE}
  artifacts:
    <<: *artifact_rpt


sette_rpt:REPRO:
  stage: check
  needs:
    - job: sette_run:REPRO
      parallel:
        matrix:
          - CONFIG: !reference [.repro, variables, CONFIG]
  dependencies: []   # do not retrieve previous artifacts
  rules:
    - if: $SETTE_TEST =~ /ALL|REPRO/ && ($CONFIG =~ $PATTERN_REPRO || $NEMO_CONFIG =~ $PATTERN_REPRO)
      when: delayed
      start_in: 5 seconds
  parallel: 
    <<: *loop
  tags:
    - $NEMO_HPC
  variables:
    TEST_TYPE: 'REPRO'
    LOG_FILE: 'sette_rpt_${TEST_TYPE}_${CONFIG}_${NEMO_HPC}_${CI_COMMIT_SHORT_SHA}.log'
    GIT_STRATEGY: none
  script:
    - cd sette
    - ./sette_rpt.sh ${RPT_OPT} -n "${CONFIG}" -x "${TEST_TYPE}" -s ${CI_COMMIT_SHORT_SHA} | tee -a ${LOG_FILE}
  artifacts:
    <<: *artifact_rpt


sette_rpt:CORRUPT:
  stage: check
  needs:
    - job: sette_run:CORRUPT
      parallel:
        matrix:
          - CONFIG: !reference [.corrupt, variables, CONFIG]
  dependencies: []   # do not retrieve previous artifacts
  rules:
    - if: $SETTE_TEST =~ /ALL|CORRUPT/ && ($CONFIG =~ $PATTERN_CORRUPT || $NEMO_CONFIG =~ $PATTERN_CORRUPT)
      when: delayed
      start_in: 5 seconds
  parallel: 
    <<: *loop
  tags:
    - $NEMO_HPC
  variables:
    TEST_TYPE: 'CORRUPT'
    LOG_FILE: 'sette_rpt_${TEST_TYPE}_${CONFIG}_${NEMO_HPC}_${CI_COMMIT_SHORT_SHA}.log'
    GIT_STRATEGY: none
  script:
    - cd sette
    - ./sette_rpt.sh ${RPT_OPT} -n "${CONFIG}" -x "${TEST_TYPE}" -s ${CI_COMMIT_SHORT_SHA} | tee -a ${LOG_FILE}
  artifacts:
    <<: *artifact_rpt


sette_rpt:PHYOPTS:
  stage: check
  needs:
    - job: sette_run:PHYOPTS
      parallel:
        matrix:
          - CONFIG: !reference [.phyopts, variables, CONFIG]
  dependencies: []   # do not retrieve previous artifacts
  rules:
    - if: $SETTE_TEST =~ /ALL|PHYOPTS/ && ($CONFIG =~ $PATTERN_PHYOPTS || $NEMO_CONFIG =~ $PATTERN_PHYOPTS)
      when: delayed
      start_in: 5 seconds
  parallel: 
    <<: *loop
  tags:
    - $NEMO_HPC
  variables:
    TEST_TYPE: 'PHYOPTS'
    LOG_FILE: 'sette_rpt_${TEST_TYPE}_${CONFIG}_${NEMO_HPC}_${CI_COMMIT_SHORT_SHA}.log'
    GIT_STRATEGY: none
  script:
    - cd sette
    - ./sette_rpt.sh ${RPT_OPT} -n "${CONFIG}" -x "${TEST_TYPE}" -s ${CI_COMMIT_SHORT_SHA} | tee -a ${LOG_FILE}
  artifacts:
    <<: *artifact_rpt


sette_rpt:COMPARE:
  stage: check
  needs:
    - job: sette_run:RESTART
      parallel:
        matrix:
          - CONFIG: !reference [.restart, variables, CONFIG]
  dependencies: []   # do not retrieve previous artifacts
  rules:
    - if: $NEMO_REFSHA != "" && ($CONFIG =~ $PATTERN_RESTART || $NEMO_CONFIG =~ $PATTERN_RESTART)
      when: delayed
      start_in: 5 seconds
  parallel: 
    <<: *loop
  tags:
    - $NEMO_HPC
  variables:
    TEST_TYPE: 'COMPARE'
    LOG_FILE: 'sette_rpt_${TEST_TYPE}_${CONFIG}_${NEMO_HPC}_${CI_COMMIT_SHORT_SHA}.log'
    GIT_STRATEGY: none
  script:
    - cd sette
    - ./sette_rpt.sh ${RPT_OPT} -n "${CONFIG}" -x "${TEST_TYPE}" -s ${CI_COMMIT_SHORT_SHA} ${NEMO_REFSHA:+-S ${NEMO_REFSHA}} | tee -a ${LOG_FILE}
  artifacts:
    <<: *artifact_rpt


sette_rpt:FULL:
  stage: report
  dependencies: []   # do not retrieve previous artifacts
  rules:
    - if: $SETTE_TEST == "ALL" && $NEMO_CONFIG == "ALL"
  tags:
    - $NEMO_HPC
  script:
    - cd sette
    - ./sette_rpt.sh ${RPT_OPT} -s ${CI_COMMIT_SHORT_SHA} > sette_rpt.log
  artifacts:
    expose_as: 'SETTE report'
    paths: ['sette/sette_rpt.log']
    when: always
    expire_in: 30 days
